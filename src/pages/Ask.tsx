import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Navigation } from '@/components/Navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { useAuth } from '@/contexts/AuthContext';
import { useCategories } from '@/hooks/useCategories';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { 
  MessageCircleQuestion, 
  X, 
  Eye, 
  Send,
  Loader2,
  AlertCircle,
  HelpCircle
} from 'lucide-react';

const Ask = () => {
  const { user } = useAuth();
  const { categories } = useCategories();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    categoryId: '',
    tags: [] as string[],
    isAnonymous: false,
    isUrgent: false
  });
  
  const [newTag, setNewTag] = useState('');
  const [preview, setPreview] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!user) {
    navigate('/auth');
    return null;
  }

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  const createSlug = (title: string): string => {
    return title
      .toLowerCase()
      .replace(/[^–∞-—è—ëa-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim() || !formData.content.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –≤–æ–ø—Ä–æ—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ',
        variant: 'destructive'
      });
      return;
    }

    setLoading(true);

    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í–æ–ø—Ä–æ—Å—ã" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
      let categoryId = formData.categoryId;
      if (!categoryId) {
        const questionsCategory = categories.find(c => c.slug === 'voprosy');
        categoryId = questionsCategory?.id || null;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç-–≤–æ–ø—Ä–æ—Å
      const slug = createSlug(formData.title);
      const { data: post, error: postError } = await supabase
        .from('posts')
        .insert({
          type: 'question',
          slug,
          title: formData.title,
          content_html: formData.content,
          author_id: user.id,
          category_id: categoryId,
          status: 'pending', // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
          ...(formData.isUrgent && {
            tldr: 'üî• –°–†–û–ß–ù–´–ô –í–û–ü–†–û–°'
          })
        })
        .select()
        .single();

      if (postError) throw postError;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
      if (formData.tags.length > 0) {
        for (const tagTitle of formData.tags) {
          const tagSlug = createSlug(tagTitle);
          
          const { error: tagError } = await supabase
            .from('tags')
            .upsert({
              slug: tagSlug,
              title: tagTitle
            }, {
              onConflict: 'slug'
            });

          if (tagError) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', tagError);

          // –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–≥ —Å –ø–æ—Å—Ç–æ–º
          const { data: tag } = await supabase
            .from('tags')
            .select('id')
            .eq('slug', tagSlug)
            .single();

          if (tag) {
            await supabase
              .from('post_tags')
              .insert({
                post_id: post.id,
                tag_id: tag.id
              });
          }
        }
      }

      toast({
        title: '–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
        description: formData.isUrgent 
          ? '–í–∞—à —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.'
          : '–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.',
      });

      navigate('/me');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  if (preview) {
    return (
      <div className="min-h-screen bg-background">
        <Navigation />
        <div className="container mx-auto px-4 py-8 max-w-4xl">
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-2xl font-bold">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞</h1>
            <Button onClick={() => setPreview(false)} variant="outline">
              <X className="h-4 w-4 mr-2" />
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </div>

          <Card className="card-soft">
            <CardHeader>
              <div className="flex items-center gap-2 mb-2">
                <Badge variant="default" className="bg-primary">
                  –í–æ–ø—Ä–æ—Å
                </Badge>
                {formData.isUrgent && (
                  <Badge variant="destructive">
                    <AlertCircle className="h-3 w-3 mr-1" />
                    –°—Ä–æ—á–Ω–æ
                  </Badge>
                )}
                {formData.isAnonymous && (
                  <Badge variant="secondary">
                    –ê–Ω–æ–Ω–∏–º–Ω–æ
                  </Badge>
                )}
              </div>
              
              <CardTitle className="text-2xl flex items-center">
                <HelpCircle className="h-6 w-6 mr-2 text-primary" />
                {formData.title}
              </CardTitle>
              
              {formData.categoryId && (
                <Badge variant="outline" className="w-fit">
                  {categories.find(c => c.id === formData.categoryId)?.title}
                </Badge>
              )}
            </CardHeader>

            <CardContent>
              <div className="content-prose">
                {formData.content.split('\n').map((paragraph, index) => (
                  <p key={index} className="mb-4">
                    {paragraph}
                  </p>
                ))}
              </div>

              {formData.tags.length > 0 && (
                <div className="mt-6 pt-6 border-t">
                  <h4 className="font-semibold mb-3">–¢–µ–≥–∏:</h4>
                  <div className="flex flex-wrap gap-2">
                    {formData.tags.map((tag, index) => (
                      <Badge key={index} variant="outline">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <div className="flex justify-center gap-4 mt-8">
            <Button onClick={() => setPreview(false)} variant="outline">
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button onClick={handleSubmit} disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                </>
              )}
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-soft">
      <Navigation />
      
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <MessageCircleQuestion className="h-8 w-8 text-primary mr-3" />
            <h1 className="text-3xl font-bold">–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h1>
          </div>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –º–∞–º –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
          </p>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ */}
        <Card className="card-soft mb-6 bg-accent/20">
          <CardContent className="pt-6">
            <h3 className="font-semibold mb-3 flex items-center">
              <HelpCircle className="h-5 w-5 mr-2 text-primary" />
              –ö–∞–∫ –∑–∞–¥–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å?
            </h3>
            <ul className="text-sm text-muted-foreground space-y-2">
              <li>‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ</li>
              <li>‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</li>
              <li>‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏</li>
              <li>‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤</li>
              <li>‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</li>
            </ul>
          </CardContent>
        </Card>

        <form onSubmit={handleSubmit} className="space-y-6">
          <Card className="card-soft">
            <CardHeader>
              <CardTitle>–í–∞—à –≤–æ–ø—Ä–æ—Å</CardTitle>
              <CardDescription>
                –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title">–°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞ *</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∫–æ–ª–∏–∫–∞–º–∏ —É –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω–æ–≥–æ?"
                  maxLength={150}
                />
                <div className="text-xs text-muted-foreground mt-1">
                  {formData.title.length}/150 —Å–∏–º–≤–æ–ª–æ–≤
                </div>
              </div>

              <div>
                <Label htmlFor="content">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</Label>
                <Textarea
                  id="content"
                  value={formData.content}
                  onChange={(e) => handleInputChange('content', e.target.value)}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —á—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏, –∫–∞–∫–∏–µ –µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏..."
                  rows={8}
                  className="min-h-[200px]"
                />
                <div className="text-xs text-muted-foreground mt-1">
                  –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ ({formData.content.length}/50)
                </div>
              </div>

              <div>
                <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                <Select value={formData.categoryId} onValueChange={(value) => handleInputChange('categoryId', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.filter(c => c.slug !== 'mamskie-istorii').map((category) => (
                      <SelectItem key={category.id} value={category.id}>
                        {category.title}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>–¢–µ–≥–∏</Label>
                <div className="flex gap-2 mb-2">
                  <Input
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π, —Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ"
                    maxLength={30}
                  />
                  <Button type="button" onClick={addTag} variant="outline">
                    –î–æ–±–∞–≤–∏—Ç—å
                  </Button>
                </div>

                {formData.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2">
                    {formData.tags.map((tag, index) => (
                      <Badge key={index} variant="secondary" className="cursor-pointer">
                        #{tag}
                        <X 
                          className="h-3 w-3 ml-1 hover:text-destructive" 
                          onClick={() => removeTag(tag)}
                        />
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="card-soft">
            <CardHeader>
              <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="urgent"
                  checked={formData.isUrgent}
                  onCheckedChange={(checked) => handleInputChange('isUrgent', !!checked)}
                />
                <Label htmlFor="urgent" className="text-sm">
                  üî• –°—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (—Ç—Ä–µ–±—É–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
                </Label>
              </div>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="anonymous"
                  checked={formData.isAnonymous}
                  onCheckedChange={(checked) => handleInputChange('isAnonymous', !!checked)}
                />
                <Label htmlFor="anonymous" className="text-sm">
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ
                </Label>
              </div>

              {formData.isUrgent && (
                <div className="bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800 rounded-lg p-3">
                  <p className="text-sm text-orange-800 dark:text-orange-200">
                    <AlertCircle className="h-4 w-4 inline mr-1" />
                    –°—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ: 
                    –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          <div className="flex justify-center gap-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => setPreview(true)}
              disabled={!formData.title || !formData.content}
            >
              <Eye className="h-4 w-4 mr-2" />
              –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            </Button>
            
            <Button 
              type="submit" 
              disabled={loading || !formData.title || !formData.content || formData.content.length < 50}
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Ask;