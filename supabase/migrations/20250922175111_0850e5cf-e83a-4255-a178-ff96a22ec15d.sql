-- Add moderator role to enum
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE user_role AS ENUM ('user', 'author', 'editor', 'admin');
    END IF;
    
    -- Add moderator to existing enum if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM pg_enum 
        WHERE enumlabel = 'moderator' 
        AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')
    ) THEN
        ALTER TYPE user_role ADD VALUE 'moderator';
    END IF;
END $$;

-- Create stats cache table for dashboard statistics
CREATE TABLE IF NOT EXISTS public.stats_cache (
    key text PRIMARY KEY,
    data jsonb NOT NULL,
    updated_at timestamptz DEFAULT now()
);

-- Create integrations table for AI/automation services
CREATE TABLE IF NOT EXISTS public.integrations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    type text NOT NULL CHECK (type IN ('openai', 'n8n', 'nodul', 'custom')),
    endpoint_url text,
    api_key text,
    webhook_secret text,
    config jsonb DEFAULT '{}',
    enabled boolean DEFAULT false,
    created_by uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create AI jobs queue table
CREATE TABLE IF NOT EXISTS public.ai_jobs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    integration_id uuid REFERENCES public.integrations(id) ON DELETE CASCADE,
    provider text NOT NULL,
    payload jsonb NOT NULL,
    status text NOT NULL DEFAULT 'queued' CHECK (status IN ('queued', 'processing', 'completed', 'failed')),
    result jsonb,
    error_message text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create moderation actions log table
CREATE TABLE IF NOT EXISTS public.moderation_actions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    moderator_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    target_type text NOT NULL CHECK (target_type IN ('post', 'comment', 'user')),
    target_id text NOT NULL,
    action text NOT NULL CHECK (action IN ('approve', 'reject', 'delete', 'hide', 'ban', 'mute')),
    reason text,
    metadata jsonb DEFAULT '{}',
    created_at timestamptz DEFAULT now()
);

-- Enable RLS on new tables
ALTER TABLE public.stats_cache ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.integrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.moderation_actions ENABLE ROW LEVEL SECURITY;

-- RLS policies for stats_cache (public read, admin write)
CREATE POLICY "Stats cache is readable by everyone"
ON public.stats_cache
FOR SELECT
USING (true);

CREATE POLICY "Admins can manage stats cache"
ON public.stats_cache
FOR ALL
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.user_id = auth.uid()
        AND profiles.role IN ('admin', 'editor')
    )
);

-- RLS policies for integrations (admin only)
CREATE POLICY "Admins can manage integrations"
ON public.integrations
FOR ALL
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.user_id = auth.uid()
        AND profiles.role = 'admin'
    )
);

-- RLS policies for ai_jobs (admin only)
CREATE POLICY "Admins can view AI jobs"
ON public.ai_jobs
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.user_id = auth.uid()
        AND profiles.role = 'admin'
    )
);

-- RLS policies for moderation_actions (admin and moderators can view)
CREATE POLICY "Moderators and admins can view moderation actions"
ON public.moderation_actions
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.user_id = auth.uid()
        AND profiles.role IN ('admin', 'editor', 'moderator')
    )
);

CREATE POLICY "Moderators and admins can log actions"
ON public.moderation_actions
FOR INSERT
TO authenticated
WITH CHECK (
    moderator_id = auth.uid() AND
    EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.user_id = auth.uid()
        AND profiles.role IN ('admin', 'editor', 'moderator')
    )
);

-- Function to update stats cache
CREATE OR REPLACE FUNCTION public.update_stats_cache()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    stats_data jsonb;
    story_count int;
    user_count int;
    question_count int;
BEGIN
    -- Count stories (published)
    SELECT COUNT(*) INTO story_count
    FROM posts
    WHERE type = 'story' AND status = 'published';
    
    -- Count users
    SELECT COUNT(*) INTO user_count
    FROM profiles;
    
    -- Count questions (published)
    SELECT COUNT(*) INTO question_count
    FROM posts
    WHERE type = 'question' AND status = 'published';
    
    -- Build stats object
    stats_data := jsonb_build_object(
        'total_stories', story_count,
        'total_users', user_count,
        'total_questions', question_count,
        'updated_at', now()
    );
    
    -- Insert or update stats cache
    INSERT INTO stats_cache (key, data, updated_at)
    VALUES ('homepage_counters', stats_data, now())
    ON CONFLICT (key)
    DO UPDATE SET
        data = EXCLUDED.data,
        updated_at = EXCLUDED.updated_at;
    
    RETURN stats_data;
END;
$$;

-- Function to get cached stats
CREATE OR REPLACE FUNCTION public.get_homepage_stats()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    cached_stats jsonb;
    cache_age interval;
BEGIN
    -- Try to get cached stats
    SELECT data, (now() - updated_at) INTO cached_stats, cache_age
    FROM stats_cache
    WHERE key = 'homepage_counters';
    
    -- If no cache or cache is older than 1 hour, refresh
    IF cached_stats IS NULL OR cache_age > interval '1 hour' THEN
        cached_stats := update_stats_cache();
    END IF;
    
    RETURN cached_stats;
END;
$$;

-- Create trigger to update updated_at on integrations and ai_jobs
CREATE OR REPLACE FUNCTION public.update_updated_at()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

CREATE TRIGGER update_integrations_updated_at
    BEFORE UPDATE ON public.integrations
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at();

CREATE TRIGGER update_ai_jobs_updated_at
    BEFORE UPDATE ON public.ai_jobs
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at();

-- Initial stats cache population
SELECT public.update_stats_cache();